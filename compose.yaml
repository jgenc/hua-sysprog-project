services:

  kafka:
    image: &kafka-image bitnami/kafka:3.4
    ports:
      - 9092:9092
      - 9094:9094
      - 29092:29092
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_NODE_ID=1001
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1001@localhost:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094,DOCKER://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094,DOCKER://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    # depends_on:
    #   - zookeeper
    healthcheck:
      test: ["CMD", "/opt/bitnami/kafka/bin/kafka-topics.sh", "--bootstrap-server=kafka:29092", "--list"]
      start_period: 15s
      interval: 10s
  
  kafka-init:
    image: *kafka-image
    working_dir: /opt/bitnami/kafka/bin
    depends_on:
      kafka:
        condition: service_healthy
    command:
    - /usr/bin/sh
    - -c
    - |
      kafka-topics.sh --create --if-not-exists --topic users --replication-factor=1 --partitions=2 --bootstrap-server kafka:9092
      kafka-topics.sh --create --if-not-exists --topic events --replication-factor=1 --partitions=2 --bootstrap-server kafka:9092
      kafka-topics.sh --create --if-not-exists --topic coupons --replication-factor=1 --partitions=2 --bootstrap-server kafka:9092

  api:
    build:
      context: .
      dockerfile: ./api/api.Dockerfile
    container_name: hua-sysprog-api
    volumes:
      - api_data:/api/data
    environment:
      PORT: 8098
    ports:
      - '8098:8098'
    restart: "no"

  producer:
    build:
      context: .
      dockerfile: ./producers/producer.Dockerfile
    ports:
      - "8099:8099"
    environment:
      - BOOTSTRAP_SERVER=kafka:9092
    depends_on:
      # kafka-init:
      #   condition: service_completed_successfully
      kafka:
        condition: service_healthy
    restart: "no"

  consumer-users:
    # image: hua-sysprog-consumers:latest
    build:
      context: .
      dockerfile: ./consumers/consumer.Dockerfile
    environment:
    #   - BOOTSTRAP_SERVER=kafka:29092
      - TOPIC=users
    depends_on:
    #   # kafka-init:
    #   #   condition: service_completed_successfully
      kafka:
        condition: service_healthy

  consumer-coupons:
    # image: hua-sysprog-consumers:latest
    build:
      context: .
      dockerfile: ./consumers/consumer.Dockerfile
    environment:
    #   - BOOTSTRAP_SERVER=kafka:29092
      - TOPIC=coupons
    depends_on:
    #   # kafka-init:
    #   #   condition: service_completed_successfully
      kafka:
        condition: service_healthy

  consumer-events:
    # image: hua-sysprog-consumers:latest
    build:
      context: .
      dockerfile: ./consumers/consumer.Dockerfile
    environment:
    #   - BOOTSTRAP_SERVER=kafka:29092
      - TOPIC=events
    depends_on:
    #   # kafka-init:
    #   #   condition: service_completed_successfully
      kafka:
        condition: service_healthy

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  api_data:
    driver: local

networks:
  default:
    driver: bridge
    name: my-network